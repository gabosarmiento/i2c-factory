[
    {
      "name": "Intro to Data Pipeline Factory",
      "type": "narration",
      "message": "In this demo, we’ll create a backend app where the user describes a data pipeline — and our AI agents generate the full code automatically. The system uses Groq + Agno to build real, runnable Python modules.",
      "pause": 3
    },
    {
      "name": "Initial Backend Scaffolding",
      "type": "initial_generation",
      "prompt": "Create a Python project using a `src/` folder structure with Poetry. Add a CLI entry point and basic project layout for a data pipeline factory. Include folders for ingestion, transformation, and export logic. Ensure it's ready for AI-generated modules.",
      "expected_files": [
        "pyproject.toml",
        "src/main.py",
        "src/ingestion/__init__.py",
        "src/transformation/__init__.py",
        "src/export/__init__.py",
        "README.md"
      ]
    },
    {
      "name": "Add AI Agent to Build Pipelines",
      "type": "modification",
      "prompt": "Create an Agno + Groq agent `PipelineBuilderAgent`. It receives a JSON description of a pipeline and generates Python modules for ingestion, transformation, and export. Use tools to validate data formats and auto-create comments and type hints. Save generated code into the corresponding folders. Use FileTools.",
      "expected_changes": [
        "src/agents/PipelineBuilderAgent.py",
        "src/tools/validate_schema.py",
        "src/cli/build_pipeline.py"
      ]
    },
    {
      "name": "Enable Command: run pipeline",
      "type": "modification",
      "prompt": "Create a CLI command `run_pipeline --config pipeline.json` that loads a pipeline config, runs the generated Python ingestion → transformation → export steps in order. Add logging and error handling.",
      "expected_changes": [
        "src/cli/run_pipeline.py",
        "pipeline.json",
        "src/utils/logger.py"
      ]
    },
    {
      "name": "Outro: Data Pipeline Factory Complete",
      "type": "narration",
      "message": "That’s it! You just watched an entire Python data pipeline system built and executed using Groq-powered agents. From prompt to production — in minutes.",
      "pause": 3
    }
  ]
  