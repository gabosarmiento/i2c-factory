[
    {
      "name": "Introduction",
      "type": "narration",
      "message": "Welcome to the I2C Factory demo. You'll see how a well-designed prompt can generate a real, full-featured crypto dashboard from scratch.",
      "pause": 3
    },
    {
      "name": "Initial Project Generation",
      "type": "initial_generation",
      "prompt": "Build a complete frontend-only cryptocurrency dashboard using React, TypeScript, and Vite. The app must support:\n\n- Login using localStorage (username-based)\n- Light/dark mode toggle\n- User-specific data (favorites, portfolio)\n\nUse clean component structure and modern layout. Include public/index.html, src/main.tsx, src/style.css, App.tsx, and components for Login, Dashboard, ThemeSwitcher, and FavoritesList. Ensure the app runs correctly with Vite and is structured for maintainability.",
      "expected_files": [
        "public/index.html",
        "src/main.tsx",
        "src/App.tsx",
        "src/style.css",
        "src/components/Dashboard.tsx",
        "src/components/Auth/Login.tsx",
        "src/components/ThemeSwitcher.tsx",
        "src/components/Favorites/FavoritesList.tsx",
        "src/services/coingecko.ts",
        "README.md"
      ]
    },
    {
      "name": "Add Portfolio Tracking",
      "type": "modification",
      "prompt": "Add portfolio tracking so users can enter and save their crypto holdings. Each user's data should be stored in localStorage using keys like 'username:portfolio'. Display total portfolio value in the dashboard.",
      "expected_changes": [
        "src/components/Portfolio/PortfolioManager.tsx",
        "src/types/portfolio.ts",
        "src/services/portfolioCalculator.ts"
      ]
    },
    {
      "name": "Add Portfolio Chart",
      "type": "modification",
      "prompt": "Add a pie chart to the PortfolioManager component using Chart.js or Recharts. The chart should show the user's crypto holdings as a percentage breakdown by coin. Use the user's saved data from localStorage.",
      "expected_changes": [
        "src/components/Portfolio/PortfolioChart.tsx"
      ]
    },
    {
      "name": "Improve Performance",
      "type": "modification",
      "prompt": "Improve the app’s performance by implementing a WebSocket connection for real-time coin updates, with fallback to polling. Also add a caching layer to reduce unnecessary API calls, using localStorage or in-memory strategies.",
      "expected_changes": [
        "src/services/websocket.ts",
        "src/hooks/useRealTimeData.ts",
        "src/services/cache.ts"
      ]
    },
    {
      "name": "Developer Enhancements",
      "type": "modification",
      "prompt": "Update dependencies to their latest stable versions. Then generate a beginner-friendly README.md with clear steps to install, run, and understand the app. Include a summary of its features, tech stack, and Vite instructions.",
      "expected_changes": [
        "package.json",
        "README.md"
      ]
    },
    {
      "name": "Conclusion",
      "type": "narration",
      "message": "This dashboard was built using natural language prompts. From layout to logic, charts to caching — all delivered in one continuous flow. This is prompt-driven development.",
      "pause": 5
    },
    {
      "name": "Add Instant Run Instructions",
      "type": "modification",
      "prompt": "Update the README.md to include a short 'Quick Start' section that lets users run the app with minimal setup. Assume they already have Node and npm installed. Include only these steps: 1) `cd` into the project folder, 2) `npm install`, 3) `npm run dev`, and 4) open http://localhost:5173. Keep it short, beginner-friendly, and copy-paste ready."
    },
    {
      "name": "Add One-Click Run Script",
      "type": "modification",
      "prompt": "Create a Bash script `run.sh` in the project root that installs dependencies with `npm install` and starts the Vite dev server with `npm run dev`. Make it executable and beginner-friendly. Add comments explaining each step."
    },
    {
      "name": "Add Reflective AI Critique",
      "type": "modification",
      "prompt": "Add a step at the end where the system itself reviews the generated app, identifies gaps or UX issues, and proposes next steps for improvement. The AI should evaluate the app as if it's preparing for real user feedback or investor presentation. Store the output in a file like `docs/AI_REVIEW.md`."
    }

      
  ]
  