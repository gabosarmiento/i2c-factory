{
  "name": "Create AI-Powered Code Assistant with Smart Retrieval",
  "description": "Build a sophisticated AI coding assistant that can understand your codebase, fetch examples from GitHub, and write context-aware code using intelligent retrieval",
  "steps": [
    {
      "type": "narration",
      "name": "Demo Introduction",
      "message": "🚀 Welcome to the I2C Factory AI Code Assistant Demo!\n\nWe're about to build a sophisticated coding assistant that:\n• Understands your entire codebase through intelligent retrieval\n• Fetches real examples from GitHub repositories\n• Writes context-aware code using multiple AI agents\n• Adapts to your project's coding patterns automatically\n\nLet's create something amazing! 🌟",
      "pause": 5
    },
    {
      "type": "initial_generation", 
      "name": "Generate Smart Code Assistant",
      "prompt": "Create a comprehensive AI-powered code assistant application with the following advanced features:\n\n**Core Application Structure:**\n1. **Smart Assistant Interface** - Streamlit app with chat-like interface for code requests\n2. **Multi-Agent Architecture** - Different agents for analysis, implementation, testing, and documentation\n3. **Intelligent Retrieval System** - Vector search through codebase + GitHub example fetching\n4. **Context-Aware Code Generation** - Understands project patterns and generates matching code\n5. **Real-time Collaboration** - Multiple agents working together with visible thought processes\n\n**Key Components to Build:**\n- `app.py` - Main Streamlit interface with modern UI\n- `agents/code_analyst.py` - Agent that analyzes codebases and understands patterns\n- `agents/code_implementer.py` - Agent that writes code based on analysis\n- `agents/github_researcher.py` - Agent that finds relevant examples from GitHub\n- `agents/test_generator.py` - Agent that creates tests for generated code\n- `retrieval/vector_search.py` - Intelligent code search and context retrieval\n- `retrieval/github_integration.py` - GitHub API integration for example fetching\n- `utils/code_analyzer.py` - Code pattern recognition and style analysis\n- `utils/project_scanner.py` - Project structure understanding\n\n**Advanced Features:**\n- Multi-step agent workflows with visible reasoning\n- Real-time code analysis and pattern matching\n- Automatic dependency detection and import suggestions\n- Code quality assessment and improvement suggestions\n- Integration with popular GitHub repositories for examples\n- Project-specific coding style adaptation\n- Interactive code refinement through agent collaboration\n\n**UI/UX Requirements:**\n- Modern, professional interface with dark theme\n- Real-time agent activity visualization\n- Code diff viewing with syntax highlighting\n- Interactive agent conversation display\n- Progress indicators for multi-step operations\n- Collapsible sections for different agent outputs\n- Copy-to-clipboard functionality for generated code\n\nMake this a production-ready application that showcases the power of multi-agent AI collaboration for software development.",
      "project_name": "ai_code_assistant"
    },
    {
      "type": "knowledge",
      "name": "Add I2C Factory Core",
      "doc_path": "./src/i2c",
      "doc_type": "Framework Core",
      "framework": "I2C Factory",
      "version": "1.0",
      "recursive": true
    },
    {
      "type": "knowledge",
      "name": "Add LLM Provider Configuration", 
      "doc_path": "./src/i2c/llm_providers.py",
      "doc_type": "LLM Configuration",
      "framework": "I2C Factory",
      "version": "1.0"
    },
    {
      "type": "knowledge",
      "name": "Add Groq-Compatible Tools",
      "doc_path": "./src/i2c/agents/modification_team/groq_compatible_tools.py",
      "doc_type": "Retrieval Tools",
      "framework": "I2C Factory", 
      "version": "1.0"
    },
    {
      "type": "knowledge_folder",
      "name": "Add Agno Agent Framework",
      "folder_path": "/projects/agno-main/libs/agno/agno",
      "doc_type": "Agent Framework",
      "framework": "Agno",
      "version": "1.4.4",
      "recursive": true
    },
    {
      "type": "agentic_evolution",
      "name": "Build Intelligent Code Analyst Agent",
      "objective": {
        "task": "Create a sophisticated Code Analyst Agent that can understand codebases, identify patterns, analyze project structure, and provide intelligent insights. This agent should use the groq_compatible_tools for vector search and project context analysis to understand the user's codebase deeply.",
        "constraints": [
          "Use the existing groq_compatible_tools (vector_retrieve, get_project_context, github_fetch)",
          "Leverage llm_highest for complex analysis tasks",
          "Implement pattern recognition for coding styles and conventions",
          "Provide detailed analysis reports with actionable insights",
          "Include dependency analysis and architectural understanding",
          "Make recommendations based on best practices and existing code patterns"
        ],
        "success_criteria": [
          "Agent can analyze any Python codebase and understand its structure",
          "Identifies coding patterns, styles, and conventions accurately", 
          "Provides intelligent suggestions for improvements",
          "Uses retrieval tools effectively to gather relevant context",
          "Generates comprehensive analysis reports"
        ]
      }
    },
    {
      "type": "agentic_evolution", 
      "name": "Build Smart Code Implementer Agent",
      "objective": {
        "task": "Develop an advanced Code Implementer Agent that writes high-quality, context-aware code based on analysis from the Code Analyst. This agent should fetch relevant examples from GitHub, understand project patterns, and generate code that seamlessly integrates with existing codebases.",
        "constraints": [
          "Use analysis insights from the Code Analyst Agent",
          "Leverage github_fetch to find relevant implementation examples",
          "Use vector_retrieve to understand existing code patterns",
          "Generate code that matches project style and conventions",
          "Include proper error handling and edge case considerations",
          "Provide multiple implementation options when appropriate"
        ],
        "success_criteria": [
          "Generates code that looks like it was written by the original developers",
          "Properly integrates with existing project structure and dependencies",
          "Includes comprehensive error handling and documentation",
          "Leverages best practices from GitHub examples",
          "Provides clean, maintainable, and well-structured code"
        ]
      }
    },
    {
      "type": "agentic_evolution",
      "name": "Build GitHub Research Agent", 
      "objective": {
        "task": "Create a GitHub Research Agent that intelligently searches for and fetches relevant code examples, best practices, and implementation patterns from popular repositories. This agent should understand the context of what's being built and find the most relevant examples.",
        "constraints": [
          "Use github_fetch tool to access popular repositories",
          "Implement intelligent repository selection based on context",
          "Focus on high-quality, well-maintained repositories",
          "Extract and summarize relevant code patterns",
          "Provide multiple examples from different sources",
          "Include license information and attribution"
        ],
        "success_criteria": [
          "Finds highly relevant examples for any coding task",
          "Selects examples from reputable, well-maintained repositories", 
          "Provides clear explanations of why examples are relevant",
          "Extracts key patterns and best practices from examples",
          "Respects licensing and provides proper attribution"
        ]
      }
    },
    {
      "type": "agentic_evolution",
      "name": "Build Test Generation Agent",
      "objective": {
        "task": "Develop a Test Generation Agent that creates comprehensive test suites for generated code. This agent should understand testing patterns in the project, generate various types of tests (unit, integration, edge cases), and ensure high code coverage.",
        "constraints": [
          "Analyze existing test patterns using vector_retrieve",
          "Generate tests that match project testing conventions",
          "Include unit tests, integration tests, and edge case testing",
          "Use appropriate testing frameworks (pytest, unittest, etc.)",
          "Generate meaningful test data and scenarios",
          "Include performance and security test considerations"
        ],
        "success_criteria": [
          "Generates comprehensive test suites with high coverage",
          "Tests follow project conventions and best practices",
          "Includes various types of tests appropriate to the code",
          "Test code is clean, readable, and maintainable",
          "Covers edge cases and error conditions effectively"
        ]
      }
    },
    {
      "type": "agentic_evolution",
      "name": "Create Advanced Streamlit Interface",
      "objective": {
        "task": "Build a stunning, professional Streamlit interface that showcases the multi-agent collaboration. The interface should provide real-time visibility into agent thinking, beautiful code display, interactive features, and an overall 'wow factor' user experience.",
        "constraints": [
          "Create a modern, dark-themed interface with professional styling",
          "Show real-time agent activity and thought processes", 
          "Include interactive code viewing with syntax highlighting",
          "Add agent conversation displays and collaboration visualization",
          "Implement progress indicators and status updates",
          "Include copy-to-clipboard and export functionality",
          "Add responsive design for different screen sizes",
          "Create collapsible sections for organized information display"
        ],
        "success_criteria": [
          "Interface looks professional and modern",
          "Users can see agents working together in real-time",
          "Code is displayed beautifully with proper syntax highlighting",
          "Interactive features work smoothly and intuitively",
          "Overall experience creates a 'wow' impression",
          "Interface is responsive and works well on different devices"
        ]
      }
    },
    {
      "type": "agentic_evolution",
      "name": "Add Integration and Polish",
      "objective": {
        "task": "Integrate all components seamlessly, add production-level error handling, create comprehensive documentation, and add impressive demo scenarios that showcase the system's capabilities. Include setup instructions and example use cases.",
        "constraints": [
          "Ensure all agents work together smoothly",
          "Add robust error handling and recovery mechanisms",
          "Create clear documentation and setup instructions",
          "Include impressive demo scenarios and example queries",
          "Add configuration options and customization features",
          "Ensure compatibility with the I2C Factory environment",
          "Include performance optimizations and caching"
        ],
        "success_criteria": [
          "System works reliably end-to-end without errors",
          "Documentation is clear and comprehensive",
          "Demo scenarios are impressive and showcase key features",
          "Setup process is simple and straightforward",
          "Performance is smooth and responsive",
          "System handles edge cases and errors gracefully"
        ]
      }
    },
    {
      "type": "narration",
      "name": "Demo Complete",
      "message": "🎉 **WOW! Your AI Code Assistant is Ready!**\n\n**What you just built:**\n✨ Multi-agent AI system that understands codebases\n🔍 Intelligent retrieval from your code + GitHub examples\n🤖 Agents that collaborate like a senior dev team\n💻 Beautiful interface showing real-time AI thinking\n🚀 Production-ready code generation with context awareness\n\n**Try these impressive demos:**\n• 'Build a REST API with authentication using FastAPI'\n• 'Create a data pipeline with error handling and logging'\n• 'Add caching and optimization to my existing function'\n• 'Generate comprehensive tests for my new module'\n\n**Run with:** `streamlit run app.py`\n\nWatch as multiple AI agents collaborate, search your codebase, fetch GitHub examples, and generate perfect code that matches your project! 🌟",
      "pause": 8
    }
  ]
}