[
  {
    "name": "Introduction",
    "type": "narration",
    "message": "Welcome to the Business Idea to Intelligent App Factory demo! We're building a customer feedback system that doesn't just collect data—it intelligently analyzes and acts on it using Agno-powered agents built with clean architecture.",
    "pause": 3
  },
  {
    "name": "Initial Project Setup",
    "type": "initial_generation",
    "prompt": "Create a 'Smart Feedback System' with Python FastAPI for the backend and React for the frontend. Apply clean architecture principles with separation between domain, use cases, adapters, and framework. The system should be ready to integrate with Agno agents.",
    "expected_files": [
      "backend/src/domain/__init__.py",
      "backend/src/domain/entities/feedback.py",
      "backend/src/use_cases/__init__.py",
      "backend/src/use_cases/collect_feedback.py",
      "backend/src/use_cases/analyze_feedback.py",
      "backend/src/adapters/__init__.py", 
      "backend/src/adapters/repository_adapter.py",
      "backend/src/adapters/api_adapter.py",
      "backend/src/framework/__init__.py",
      "backend/src/framework/main.py",
      "frontend/src/App.tsx",
      "frontend/src/components/FeedbackForm.tsx",
      "frontend/src/components/Dashboard.tsx",
      "README.md"
    ]
  },
  {
    "name": "Add Agno Agent Integration",
    "type": "modification",
    "prompt": "Add integration with Agno agents to the feedback system. Create a 'FeedbackAnalysisAgent' that can analyze sentiment, categorize feedback, and extract actionable insights. Follow clean architecture by implementing an agent adapter that connects to your use cases without violating architecture principles.",
    "expected_changes": [
      "backend/src/domain/entities/analysis_result.py",
      "backend/src/adapters/agno_agent_adapter.py",
      "backend/src/framework/agent_factory.py",
      "backend/src/agents/feedback_analysis_agent.py"
    ]
  },
  {
    "name": "Implement Multi-Agent Team",
    "type": "modification",
    "prompt": "Enhance the system with a multi-agent team approach using Agno. Create specialized agents for different aspects of feedback analysis (sentiment, categorization, actionable insights, priority scoring) that work together. Use your clean architecture to ensure the agents are easily testable and replaceable.",
    "expected_changes": [
      "backend/src/agents/sentiment_agent.py",
      "backend/src/agents/categorization_agent.py",
      "backend/src/agents/insight_agent.py",
      "backend/src/agents/prioritization_agent.py",
      "backend/src/framework/team_factory.py",
      "backend/src/adapters/team_manager_adapter.py"
    ]
  },
  {
    "name": "Add Smart Caching System",
    "type": "modification",
    "prompt": "Add an intelligent caching system with TTL (Time To Live) that learns from usage patterns. It should cache frequent queries but bypass cache for rapidly changing data. Implement this following clean architecture principles with a cache adapter and manager.",
    "expected_changes": [
      "backend/src/domain/entities/cache_entry.py",
      "backend/src/use_cases/cache_manager.py",
      "backend/src/adapters/cache_adapter.py"
    ]
  },
  {
    "name": "Add Automated Response Generation",
    "type": "modification",
    "prompt": "Add an agent that automatically generates appropriate responses to feedback based on content, sentiment, and category. The responses should be tailored to the feedback type and include suggestions for addressing issues. Implement this using your clean architecture patterns.",
    "expected_changes": [
      "backend/src/domain/entities/response_template.py",
      "backend/src/use_cases/generate_response.py",
      "backend/src/agents/response_generator_agent.py",
      "backend/src/adapters/template_adapter.py"
    ]
  },
  {
    "name": "Implement API Rate Limiting",
    "type": "modification",
    "prompt": "Add intelligent rate limiting that adapts based on user behavior and system load. Implement this as a clean architecture component with a rate limit adapter and use case that can be plugged into the system without modifying core business logic.",
    "expected_changes": [
      "backend/src/domain/entities/rate_limit.py",
      "backend/src/use_cases/rate_limiter.py",
      "backend/src/adapters/rate_limit_adapter.py"
    ]
  },
  {
    "name": "Add Integration Tests",
    "type": "modification",
    "prompt": "Add integration tests that demonstrate the benefits of clean architecture with Agno agents. Show how each layer can be tested in isolation and how the agents can be mocked for testing purposes.",
    "expected_changes": [
      "backend/tests/domain/test_entities.py",
      "backend/tests/use_cases/test_analyze_feedback.py",
      "backend/tests/adapters/test_agno_adapter.py",
      "backend/tests/integration/test_feedback_flow.py"
    ]
  },
  {
    "name": "Create Demo Mode",
    "type": "modification",
    "prompt": "Add a 'demo mode' that shows the system in action with synthetic data and slowed-down agent interactions to visualize how the clean architecture works with the Agno agents. Include visualization of the data flow between architecture layers.",
    "expected_changes": [
      "backend/src/framework/demo_mode.py",
      "frontend/src/components/DemoVisualizer.tsx",
      "frontend/src/pages/DemoPage.tsx"
    ]
  },
  {
    "name": "Add One-Click Run Script",
    "type": "modification",
    "prompt": "Create a run.sh script that sets up everything with a single command: installing dependencies, initializing the database, starting the backend and frontend, and launching the demo mode.",
    "expected_changes": [
      "run.sh"
    ]
  },
  {
    "name": "Generate Architecture Documentation",
    "type": "modification",
    "prompt": "Generate comprehensive documentation that explains the clean architecture implementation and how it enables the intelligent agent system. Include diagrams showing the flow of data through the system layers and how the agents interact within the architecture.",
    "expected_changes": [
      "docs/ARCHITECTURE.md",
      "docs/images/system_architecture.png",
      "docs/images/agent_interaction.png"
    ]
  },
  {
    "name": "Conclusion",
    "type": "narration",
    "message": "We've just witnessed the future of application development: business ideas transformed into intelligent, agent-powered applications with clean, maintainable architecture. This system not only generates code—it creates truly intelligent applications that can learn, adapt, and provide real business value.",
    "pause": 5
  }
]