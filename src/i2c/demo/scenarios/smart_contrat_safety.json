[
{
"name": "Introduction",
"type": "narration",
"message": "Welcome to the Smart Contract Safety Dashboard demo. You will see how AI analyzes Solidity smart contracts, computes safety scores, detects vulnerabilities, and applies real-time improvements.",
"pause": 3
},
{
"name": "Create Streamlit App Skeleton",
"type": "initial_generation",
"prompt": "Build a Streamlit app in Python named 'smart_contract_dashboard.py'. It must include: a Solidity code editor (text area), an 'Analyze Contract' button, a safety score display (progress bar or metric), a list of vulnerabilities with severity badges, and a panel with AI-powered suggestions with 'Apply' buttons. Use Streamlit's layout primitives (columns, metrics, buttons). Add basic styling with st.markdown for better visuals.",
"expected_files": [
"app/smart_contract_dashboard.py",
"app/styles.css"
]
},
{
"name": "Implement ContractAnalyzer Service",
"type": "modification",
"prompt": "Create 'services/contract_analyzer.py' with a ContractAnalyzer class. Given Solidity code, it detects vulnerabilities, computes a safety score (0-100%), and generates suggestions. Output JSON with: score, vulnerabilities [{description, severity}], suggestions [{id, text}].",
"expected_files": [
"services/contract_analyzer.py"
]
},
{
"name": "Implement SuggestionApplier Service",
"type": "modification",
"prompt": "Create 'services/suggestion_applier.py' with a SuggestionApplier class. Given Solidity code and a suggestion ID, it returns the refactored Solidity code applying the suggestion. Handle cases like adding SafeMath, Ownable, and restricting public functions.",
"expected_files": [
"services/suggestion_applier.py"
]
},
{
"name": "Connect Suggestion Application in Frontend",
"type": "modification",
"prompt": "In 'smart_contract_dashboard.py', for each suggestion, render an 'Apply' button. When clicked, send the current Solidity code and suggestion ID to SuggestionApplier, update the editor with refactored code, and trigger ContractAnalyzer to refresh safety score and vulnerabilities.",
"expected_files": [
"app/smart_contract_dashboard.py"
]
},
{
"name": "Add Export Functionality",
"type": "modification",
"prompt": "Add an 'Export Results' button in 'smart_contract_dashboard.py'. On click, download the final smart contract as a .sol file and a JSON report with initial/final scores, vulnerabilities fixed, and suggestions applied. Use Streamlit's st.download_button.",
"expected_files": [
"app/smart_contract_dashboard.py",
"services/export_service.py"
]
},
{
"name": "Enhance UI with Styling and UX Improvements",
"type": "modification",
"prompt": "Improve UI visuals: use colored badges for vulnerability severity, progress bar for safety score, section headers with st.markdown, and tooltips for vulnerability details. Load additional styles from 'styles.css'.",
"expected_files": [
"app/smart_contract_dashboard.py",
"app/styles.css"
]
},
{
"name": "Final Touches: Success Banner and Reset",
"type": "modification",
"prompt": "In 'smart_contract_dashboard.py', add a success banner when safety score exceeds 90%. Include a 'Reset Demo' button to clear state and start over.",
"expected_files": [
"app/smart_contract_dashboard.py"
]
},
{
"name": "Conclusion",
"type": "narration",
"message": "The Smart Contract Safety Dashboard is now complete. You can analyze, refactor, and export Solidity contracts with AI-driven safety features, all in a seamless Streamlit experience.",
"pause": 5
}
]

