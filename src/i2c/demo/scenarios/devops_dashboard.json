[
  {
    "name": "Introduction",
    "type": "narration",
    "message": "Welcome to the DevOps Dashboard orchestration demo! We'll create a full-stack monitoring application with React frontend and Python backend. This demonstrates the agentic orchestration capabilities with reasoning, planning, and collaboration between specialized teams.",
    "pause": 3
  },
  {
    "name": "Initial Project Setup",
    "type": "initial_generation",
    "prompt": "Create a 'DevOps Dashboard' app with a Python FastAPI backend and React TypeScript frontend. The backend should collect metrics from various systems via API, store them in a time-series database structure, and expose endpoints for the frontend to query. The frontend should display these metrics in interactive charts, have alert configuration options, and feature dark/light modes. Apply proper architecture with services, controllers, and models.",
    "expected_files": [
      "backend/src/main.py",
      "backend/src/models/metric.py",
      "backend/src/services/metrics_service.py",
      "backend/src/controllers/metrics_controller.py",
      "frontend/src/App.tsx",
      "frontend/src/components/Dashboard/Dashboard.tsx",
      "frontend/src/components/Alerts/AlertConfig.tsx",
      "frontend/src/components/Charts/TimeSeriesChart.tsx",
      "README.md"
    ]
  },
  {
    "name": "Add Real-time Updates",
    "type": "modification",
    "prompt": "Add WebSocket support to enable real-time metric updates. The backend should push metric updates through WebSockets, and the frontend should connect and display metrics in real-time. Ensure proper error handling for connection failures and implement a fallback polling mechanism.",
    "expected_changes": [
      "backend/src/services/websocket_service.py",
      "backend/src/controllers/websocket_controller.py",
      "frontend/src/services/websocket.ts",
      "frontend/src/hooks/useRealTimeData.ts"
    ]
  },
  {
    "name": "Implement Alert System",
    "type": "modification",
    "prompt": "Implement a comprehensive alert system that monitors metrics against configurable thresholds and sends notifications. Include different alert types (critical, warning, info), multiple notification channels (email, webhook, in-app), and alert history tracking. This requires coordination between frontend and backend components.",
    "expected_changes": [
      "backend/src/models/alert.py",
      "backend/src/services/alert_service.py",
      "backend/src/services/notification_service.py",
      "backend/src/controllers/alert_controller.py",
      "frontend/src/components/Alerts/AlertHistory.tsx",
      "frontend/src/components/Alerts/AlertRules.tsx"
    ]
  },
  {
    "name": "Add Authentication System",
    "type": "modification",
    "prompt": "Add a secure authentication system with JWT tokens, role-based access control, and user management. Different user roles (admin, operator, viewer) should have different permissions for viewing and configuring the dashboard. Implement proper security practices including token refresh and secure password storage.",
    "expected_changes": [
      "backend/src/models/user.py",
      "backend/src/services/auth_service.py",
      "backend/src/controllers/auth_controller.py",
      "backend/src/middleware/auth_middleware.py",
      "frontend/src/services/auth.ts",
      "frontend/src/contexts/AuthContext.tsx",
      "frontend/src/components/Auth/Login.tsx"
    ]
  },
  {
    "name": "Optimize Performance",
    "type": "modification",
    "prompt": "Optimize the application for performance with data aggregation for historical metrics, frontend caching strategies, and lazy loading components. Implement SQL query optimization for time-series data and ensure the dashboard remains responsive even with large datasets.",
    "expected_changes": [
      "backend/src/services/metrics_aggregation_service.py",
      "frontend/src/services/cache_service.ts",
      "frontend/src/components/Dashboard/DashboardOptimized.tsx"
    ]
  },
  {
    "name": "Add System Health Monitoring",
    "type": "modification",
    "prompt": "Implement comprehensive system health monitoring for the dashboard itself, including memory usage, API response times, and dependency status. Create a dedicated admin view that shows system health metrics and allows configuration of maintenance windows.",
    "expected_changes": [
      "backend/src/services/health_service.py",
      "backend/src/controllers/health_controller.py",
      "frontend/src/components/Admin/SystemHealth.tsx",
      "frontend/src/components/Admin/MaintenanceConfig.tsx"
    ]
  },
  {
    "name": "Implement Automated Testing",
    "type": "modification",
    "prompt": "Add comprehensive automated testing including unit tests, integration tests, and end-to-end tests. Implement test fixtures, mocks, and CI/CD configuration to ensure code quality. Focus on critical paths including authentication, alert generation, and metric collection.",
    "expected_changes": [
      "backend/tests/unit/test_metrics_service.py",
      "backend/tests/integration/test_alert_system.py",
      "frontend/src/tests/Dashboard.test.tsx",
      "frontend/src/tests/AlertConfig.test.tsx",
      ".github/workflows/ci.yml"
    ]
  },
  {
    "name": "Add Docker Deployment",
    "type": "modification",
    "prompt": "Add Docker support for containerized deployment with Docker Compose for development and production configurations. Include environment variable configuration, volume management for persistence, and health checks for container orchestration.",
    "expected_changes": [
      "Dockerfile.backend",
      "Dockerfile.frontend",
      "docker-compose.yml",
      "docker-compose.prod.yml",
      ".env.example"
    ]
  },
  {
    "name": "Generate Documentation",
    "type": "modification",
    "prompt": "Generate comprehensive documentation including API docs, architecture overview, setup instructions, and user guides. Include diagrams showing system architecture, data flow, and component interaction.",
    "expected_changes": [
      "docs/API.md",
      "docs/ARCHITECTURE.md",
      "docs/SETUP.md",
      "docs/USER_GUIDE.md",
      "docs/images/architecture.png"
    ]
  },
  {
    "name": "Create Run Script",
    "type": "modification",
    "prompt": "Create a run.sh script that provides options for development, production, and test environments. Include command help, dependency installation, database setup, and proper environment configuration.",
    "expected_changes": [
      "run.sh"
    ]
  },
  {
    "name": "Conclusion",
    "type": "narration",
    "message": "We've just created a comprehensive DevOps Dashboard using agentic orchestration. The system leverages specialized teams for knowledge retrieval, code modification, quality checks, and operational validation - all coordinated through reasoning and reflection. This demonstrates how complex applications can be built with multiple coordinated steps while maintaining high quality and cohesiveness.",
    "pause": 5
  }
]