[
  {
    "type": "narration",
    "name": "Introduction",
    "message": "Welcome to the TensorFlow Analysis Tool Scenario. We'll create a tool that analyzes TensorFlow models for performance bottlenecks by leveraging the TensorFlow codebase as a knowledge source.",
    "pause": 2
  },
  {
    "type": "knowledge_folder",
    "name": "Import TensorFlow Knowledge",
    "folder_path": "projects/tensorflow/tensorflow",
    "doc_type": "Framework Source",
    "framework": "TensorFlow",
    "version": "2.13",
    "recursive": true
  },
  {
    "type": "knowledge",
    "name": "Import Best Practices",
    "doc_path": "docs/tensorflow_best_practices.md",
    "doc_type": "Best Practices",
    "framework": "TensorFlow",
    "version": "2.0"
  },
  {
    "type": "initial_generation",
    "name": "Create Base Analyzer",
    "prompt": "Create a Python tool that can analyze TensorFlow models to identify performance bottlenecks, memory leaks, and architectural inefficiencies. The tool should accept a model file, analyze it, and provide recommendations for improvements.",
    "project_name": "tf_analyzer",
    "language": "python"
  },
  {
    "type": "agentic_evolution",
    "name": "Add Profiling Feature",
    "objective": {
      "task": "Add a profiling feature that can analyze the computational graph of a TensorFlow model, identify operations that are computationally expensive, and suggest optimizations like operation fusion, quantization, or hardware acceleration options.",
      "language": "python",
      "constraints": [
        "Use TensorFlow's built-in profiler when possible",
        "Support both TF 1.x and 2.x models",
        "Generate visual reports using matplotlib or similar"
      ],
      "quality_gates": [
        "Can process standard TensorFlow model formats",
        "Provides actionable optimization suggestions",
        "Handles errors gracefully"
      ]
    }
  },
  {
    "type": "agentic_evolution",
    "name": "Add Memory Analysis",
    "objective": {
      "task": "Add a memory analysis feature that can detect memory leaks, identify tensors that consume excessive memory, and suggest memory optimization techniques like gradient checkpointing or model pruning.",
      "language": "python",
      "constraints": [
        "Track memory usage over training steps",
        "Visualize memory patterns",
        "Provide concrete memory reduction strategies"
      ],
      "quality_gates": [
        "Accurate memory usage reporting",
        "Low overhead during analysis",
        "Clear recommendations for memory reduction"
      ]
    }
  },
  {
    "type": "agentic_evolution",
    "name": "Add Model Comparison",
    "objective": {
      "task": "Add a feature to compare two models or two versions of the same model to highlight differences in architecture, performance characteristics, and potential improvements made between versions.",
      "language": "python",
      "constraints": [
        "Support diffing model architectures",
        "Compare performance metrics",
        "Generate side-by-side visualizations"
      ],
      "quality_gates": [
        "Accurate difference detection",
        "Informative visualizations",
        "Handles models of different sizes/structures"
      ]
    }
  },
  {
    "type": "narration",
    "name": "Conclusion",
    "message": "The TensorFlow Analyzer has been successfully created with profiling, memory analysis, and model comparison features. This tool demonstrates how i2c Factory can leverage framework knowledge to build sophisticated developer tools.",
    "pause": 2
  }
]