[
  {
    "name": "Introduction",
    "type": "narration",
    "message": "Welcome to the Smart Contract Safety Dashboard demo. You'll see how AI analyzes Solidity contracts, scores safety, detects vulnerabilities, and applies live improvementsâ€”all in an interactive interface you'll test yourself.",
    "pause": 3
  },
  {
    "name": "Build Interactive Streamlit Dashboard",
    "type": "initial_generation",
    "prompt": "Create 'smart_contract_dashboard.py' using Streamlit. Required UI actions:\n\n* Solidity code editor (large text area).\n* 'Analyze Contract' button to trigger analysis.\n* Visual safety score gauge (0-100%) with red/yellow/green zones.\n* List vulnerabilities with colored severity badges and info tooltips.\n* Suggestion cards with 'Apply Fix' buttons for each.\n* Show 'Before' and 'After' scores after applying fixes.\n* Include 'Export Results' and 'Reset' buttons.\n\nLayout: use st.columns, st.expander, st.metric, st.progress, st.button. Apply custom CSS for modern visuals.",
    "expected_files": [
      "app/smart_contract_dashboard.py",
      "app/styles.css"
    ]
  },
  {
    "name": "Implement ContractAnalyzer Backend",
    "type": "modification",
    "prompt": "Create 'services/contract_analyzer.py'. Define ContractAnalyzer class:\n* Input: Solidity code.\n* Output: JSON with score (0-100), vulnerabilities [{desc, severity}], suggestions [{id, text, type}].\nDetect common issues: reentrancy, overflow, visibility, gas inefficiencies.",
    "expected_files": [
      "services/contract_analyzer.py"
    ]
  },
  {
    "name": "Implement SuggestionApplier Backend",
    "type": "modification",
    "prompt": "Create 'services/suggestion_applier.py'. Define SuggestionApplier class:\n* Input: Solidity code + suggestion ID.\n* Output: refactored Solidity code.\nHandle cases like adding SafeMath, Ownable, visibility restrictions, and optimizing loops.",
    "expected_files": [
      "services/suggestion_applier.py"
    ]
  },
  {
    "name": "Connect Suggestion Interactions",
    "type": "modification",
    "prompt": "In 'smart_contract_dashboard.py':\n* Render 'Apply Fix' button for each suggestion.\n* On click, call SuggestionApplier with current code and suggestion ID.\n* Update code editor with refactored code.\n* Re-run ContractAnalyzer to refresh score and vulnerabilities.",
    "expected_files": [
      "app/smart_contract_dashboard.py"
    ]
  },
  {
    "name": "Add Export & Reset Actions",
    "type": "modification",
    "prompt": "Enhance 'smart_contract_dashboard.py' with:\n* 'Export Results' button: download refactored contract (.sol) and JSON report (initial score, final score, fixes applied).\n* 'Reset' button: clears code editor, resets score, vulnerabilities, suggestions.",
    "expected_files": [
      "app/smart_contract_dashboard.py",
      "services/export_service.py"
    ]
  },
  {
    "name": "Boost UX with Visual Feedback",
    "type": "modification",
    "prompt": "Improve UX by adding:\n* Severity badges with colors and hover tooltips.\n* Live safety score progress bar.\n* Icon-enhanced section headers.\n* Success banner when score exceeds 90%.\n* Visual feedback for 'Apply Fix' and 'Export' actions (e.g., st.success message).\nStyle all with 'styles.css'.",
    "expected_files": [
      "app/smart_contract_dashboard.py",
      "app/styles.css"
    ]
  },
  {
    "name": "Interactive Testing Flow",
    "type": "modification",
    "prompt": "Guide the user in demo:\n* After running analysis, highlight actionable suggestions.\n* Prompt user to apply fixes one by one.\n* After each fix, show score improvement.\n* On export, confirm with success message.\n* Offer 'Test Another Contract' option to restart flow.",
    "expected_files": [
      "app/smart_contract_dashboard.py"
    ]
  },
  {
    "name": "Conclusion",
    "type": "narration",
    "message": "Demo complete. You have analyzed, improved, and exported smart contracts using AI. Feel free to test more examples.",
    "pause": 5
  }
]
