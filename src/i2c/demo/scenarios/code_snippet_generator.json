{
  "name": "Build Code Snippet Generator MVP",
  "description": "A web app that generates code snippets from natural language descriptions",
  "steps": [
    {
      "type": "initial_generation",
      "name": "Create Base Application",
      "prompt": "Create a modern web application called 'SnippetForge' with React frontend and FastAPI backend. Users should be able to describe what code they need in plain English, select a programming language, and get a working code snippet. Include a beautiful dark theme UI with syntax highlighting.",
      "project_name": "snippet_forge"
    },
    {
      "type": "agentic_evolution",
      "name": "Add Core Snippet Generation",
      "objective": {
        "task": "Implement the core snippet generation engine that can create code for common programming tasks like validation, sorting, API calls, and data processing. Support Python, JavaScript, and TypeScript initially.",
        "constraints": [
          "Generate syntactically correct code",
          "Include helpful comments",
          "Follow language-specific best practices",
          "Handle edge cases gracefully"
        ],
        "quality_gates": ["python", "javascript", "typescript"]
      }
    },
    {
      "type": "agentic_evolution",
      "name": "Add Smart Context Understanding",
      "objective": {
        "task": "Enhance the snippet generator with context awareness. It should parse and understand variations in how users describe tasks and generate appropriate code. Specifically implement: 1) Keyword extraction from user input, 2) Task classification logic, 3) Multiple implementation options, 4) Usage examples for each snippet.",
        "constraints": [
          "Must implement keyword extraction from user input",
          "Must include task classification logic (e.g., sorting, validation, API)",
          "Must provide at least 2 implementation options when relevant",
          "Must include usage examples with each snippet",
          "The implementation must be functional, not just placeholders"
        ]
      }
    },
    {
      "type": "agentic_evolution",
      "name": "Polish UI and Deploy",
      "objective": {
        "task": "Create a stunning, professional UI with smooth animations, real-time syntax highlighting, one-click copy functionality, and share buttons. Add deployment configuration for Vercel/Netlify.",
        "constraints": [
          "Mobile-responsive design",
          "Fast loading times",
          "SEO-friendly",
          "Include analytics to track usage"
        ]
      }
    },
    {
      "type": "agentic_evolution",
      "name": "Implement Keyword Extraction Only",
      "objective": {
        "task": "Add ONLY keyword extraction functionality to the backend. Create a specific Python function called extract_keywords(prompt: str) -> List[str] in backend/nlp_utils.py that takes a user prompt and returns a list of programming task keywords. For example 'sort a list of numbers' should return ['sort', 'list', 'numbers']. This must be a working implementation, not a placeholder.",
        "constraints": [
          "Function must be called extract_keywords",
          "Function must be in backend/nlp_utils.py",
          "Function must use simple NLP techniques (tokenization, stopword removal)",
          "Function must be called from the main API endpoint"
        ]
      }
    }
  ]
}